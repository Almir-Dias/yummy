<div class="jumbotron">
  <h1 class="text-center-home">Yummy</h1>
  <p class="subtext">O que você procura?</p>

<div class="btn-container">
  <div class="row">
    <div class="col text-center">
      <%= link_to restaurants_path, class: 'btn btn-light' do %>
        <div class='text-start ms-4'>
          <i class="fa-solid fa-utensils" style="color: #000000;"></i>
          Restaurante
        </div>
      <% end %>
    </div>
  </div>
  <div class="row">
    <div class="col text-center">
      <%= link_to root_path, class: 'btn btn-light' do %>
        <div class='text-start ms-4'>
          <i class="fa-solid fa-beer-mug-empty" style="color: #000000;"></i>
          Bares
        </div>
      <% end %>
    </div>
  </div>
</div>
</div>


<div class="mb-2">
    <h3 class="text text-center">Restaurantes para você</h3>
</div>

<div> 
  <ul class="carousel-gallery">
    <% @restaurants.first(9).each do |restaurant| %>
      <li style="list-style-type: none">
        <div class="carousel-card d-flex flex-column align-items-center"> 
          <div class="card-image2" style="background-image: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(<%= restaurant.photo_url%>)">
            <p class="carousel-card-name"><%= restaurant.name %></p>
          </div>

          <div class="carousel-card-rating">
            <p><%= star_rating(restaurant.rating)%></p> 
          </div>
        </div>
      </li>
    <% end %>
  </ul>
</div>

<div data-controller="google-places"></div>



<%# 

<div class=>
  <div class="carousel-indicators">
    <% @restaurants.each_with_index do |restaurant, index| %>
      <%# <button type="button" data-bs-target="#restaurantCarousel" data-bs-slide-to="<%= index" <% if index == 0 %>
    <%# <% end %>
  <%# </div>
  <div class="carousel-inner">
    <% @restaurants.each_with_index do |restaurant, index| %>
      <%# <div class="carousel-item <%= 'active' if index == 0 %>
        <%# <div class="carousel-restaurant-card w-100"> %> 
          <%# <div class="card-image w-100">
            <img src="<%= restaurant.photo_url" alt="<%= restaurant.name %>" 
          <%# </div> %>
          <%# <div class="card-info">
            <h4><%= restaurant.name</h4> %> 
            <%# <p>Nota: <%= restaurant.rating</p>  %>
          <%# </div>
        </div>
      </div>
    <% end %>
  <%# </div>  %>
  <%# <button class="carousel-control-prev" type="button" data-bs-target="#restaurantCarousel" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button> %>
  <%# <button class="carousel-control-next" type="button" data-bs-target="#restaurantCarousel" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div> %> 

<%# <div data-controller="menu"></div> %>


<%# 

<script> 
const $menu = document.querySelector('.menu')
const $items = document.querySelectorAll('.menu--item')
const $images = document.querySelectorAll('.menu--item img')
let menuWidth = $menu.clientWidth
let itemWidth = $items[0].clientWidth
let wrapWidth = $items.length * itemWidth

let scrollSpeed = 0
let oldScrollY = 0
let scrollY = 0
let y = 0


/*--------------------
Lerp
--------------------*/
const lerp = (v0, v1, t) => {
  return v0 * ( 1 - t ) + v1 * t
}


/*--------------------
Dispose
--------------------*/
const dispose = (scroll) => {
  gsap.set($items, {
    x: (i) => {
      return i * itemWidth + scroll
    },
    modifiers: {
      x: (x, target) => {
        const s = gsap.utils.wrap(-itemWidth, wrapWidth - itemWidth, parseInt(x))
        return `${s}px`
      }
    }
  })
} 
dispose(0)


/*--------------------
Wheel
--------------------*/
const handleMouseWheel = (e) => {
  scrollY -= e.deltaY * 0.9
}


/*--------------------
Touch
--------------------*/
let touchStart = 0
let touchX = 0
let isDragging = false
const handleTouchStart = (e) => {
  touchStart = e.clientX || e.touches[0].clientX
  isDragging = true
  $menu.classList.add('is-dragging')
}
const handleTouchMove = (e) => {
  if (!isDragging) return
  touchX = e.clientX || e.touches[0].clientX
  scrollY += (touchX - touchStart) * 2.5
  touchStart = touchX
}
const handleTouchEnd = () => {
  isDragging = false
  $menu.classList.remove('is-dragging')
}


/*--------------------
Listeners
--------------------*/
$menu.addEventListener('mousewheel', handleMouseWheel)

$menu.addEventListener('touchstart', handleTouchStart)
$menu.addEventListener('touchmove', handleTouchMove)
$menu.addEventListener('touchend', handleTouchEnd)

$menu.addEventListener('mousedown', handleTouchStart)
$menu.addEventListener('mousemove', handleTouchMove)
$menu.addEventListener('mouseleave', handleTouchEnd)
$menu.addEventListener('mouseup', handleTouchEnd)

$menu.addEventListener('selectstart', () => { return false })


/*--------------------
Resize
--------------------*/
window.addEventListener('resize', () => {
  menuWidth = $menu.clientWidth
  itemWidth = $items[0].clientWidth
  wrapWidth = $items.length * itemWidth
})


/*--------------------
Render
--------------------*/
const render = () => {
  requestAnimationFrame(render)
  y = lerp(y, scrollY, .1)
  dispose(y)
  
  scrollSpeed = y - oldScrollY
  oldScrollY = y
  
  gsap.to($items, {
    skewX: -scrollSpeed * .2,
    rotate: scrollSpeed * .01,
    scale: 1 - Math.min(100, Math.abs(scrollSpeed)) * 0.003
  })
}
render()

</script> %>


